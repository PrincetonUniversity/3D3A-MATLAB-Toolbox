function [cPCData,numCs] = clusterPC(pcData,varargin)
%CLUSTERPC Cluster points in a point cloud.
%   [cPCData,numCs] = CLUSTERPC(pcData) clusters points in the point cloud
%   specified by pcData based on the distance of the points from the point
%   cloud origin (i.e. where x = y = z = 0 in cartesian coordinates). 
%   Clusters are generated by considering spheres centered at the origin
%   and with radii spaced 2 units apart, and mapping points from the point
%   cloud to the nearest sphere. The resulting clusters are spherical. The
%   input point cloud, pcData, can be specified as an N-by-3 matrix, where 
%   N is the number of points and where each point is specified in SOFA 
%   cartesian coordinates, or as a point cloud object (see Computer Vision 
%   System Toolbox). cPCData is a cell array, with each element
%   corresponding to a clustered point cloud stored in the same format as
%   pcData. numCs is a scalar specifying the number of clusters and is
%   equal to the number of elements in cPCData.
%
%   ___ = CLUSTERPC(...,DR) optionally specifies the radius spacing for
%   generating clusters. DR is assumed to have the same units as the units
%   in which the input point cloud is specified. DR must be a non-negative
%   scalar. Setting DR to 0 performs no clustering. DR is automatically
%   clipped if it exceeds the range of distances of the points in the point
%   cloud, resulting in 2 clusters.
%
%   See also DECLUSTERPC.

%   =======================================================================
%   This file is part of the 3D3A MATLAB Toolbox.
%   
%   Contributing author(s), listed alphabetically by last name:
%   Rahulram Sridhar <rahulram@princeton.edu>
%   3D Audio and Applied Acoustics (3D3A) Laboratory
%   Princeton University, Princeton, New Jersey 08544, USA
%   
%   MIT License
%   
%   Copyright (c) 2018 Princeton University
%   
%   Permission is hereby granted, free of charge, to any person obtaining a
%   copy of this software and associated documentation files (the 
%   "Software"), to deal in the Software without restriction, including 
%   without limitation the rights to use, copy, modify, merge, publish, 
%   distribute, sublicense, and/or sell copies of the Software, and to 
%   permit persons to whom the Software is furnished to do so, subject to 
%   the following conditions:
%   
%   The above copyright notice and this permission notice shall be included
%   in all copies or substantial portions of the Software.
%   
%   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
%   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
%   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
%   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
%   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
%   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
%   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
%   =======================================================================

narginchk(1,2);

% Parse and verify inputs
[inputs,pcFlag] = parseCLUSTERPCInputs(pcData,varargin);

% Extract parsed inputs
pcData = inputs.pcData;
DR = inputs.DR;

% Main computation begins

% 1: Convert point cloud from cartesian to spherical coordinates
sphPCData = sofaC2sofaS(pcData);

% 2: Extract radii of points
pcRadii = sphPCData(:,3);

% 3: Extract range of radii and compute cluster radii
minR = min(pcRadii);
maxR = max(pcRadii);
rangeR = maxR-minR; % Range of radii in point cloud
DR = min([max([DR,0]),rangeR]); % Clip DR to the range [0,rangeR]
if DR == 0 % No clustering is performed
    cR = rangeR/2; % Cluster radius
    cW = rangeR; % Cluster width
else
    cR = minR:DR:maxR; % Cluster radii
    cW = mean(diff(cR)); % Avg. cluster width
end
numCs = length(cR); % Compute number of clusters

% 4: Compute bounds of clustering bins
lB = cR-(cW/2);
uB = cR+(cW/2);

% 5: Generate clusters
cPCData = cell(numCs,1);
for ii = 1:numCs
    if ii == numCs
        indxs = pcRadii >= lB(ii) & pcRadii <= uB(ii);
    else
        indxs = pcRadii >= lB(ii) & pcRadii < uB(ii);
    end
    currentCPCData = sofaS2sofaC(sphPCData(indxs,:));
    % Make elements in cPCData have the same format as pcData
    if pcFlag
        cPCData{ii,1} = pointCloud(currentCPCData);
        cPCData{ii,1}.Normal = pcnormals(cPCData{ii,1});
    end
end

% Main computation ends

end

function [inputs,pcFlag] = parseCLUSTERPCInputs(pcData,opts)
%PARSECLUSTERPCINPUTS Parse and verify inputs for the clusterPC function.

p = inputParser;

% Required inputs
if strcmpi(class(pcData),'pointCloud')
    pcData = double(pcData.Location);
    pcFlag = 1;
else
    pcFlag = 0;
end
addRequired(p,'pcData',@(x)validateattributes(x,{'pointCloud',...
    'double'},{'2d','nonempty','nonnan','finite','size',[NaN,3]},...
    'clusterPC','pcData',1));

% Optional inputs
addOptional(p,'DR',2,@(x)validateattributes(x,{'double'},...
    {'scalar','nonempty','nonnegative'},'clusterPC','DR'));

p.CaseSensitive = false;
p.FunctionName = 'clusterPC';

parse(p,pcData,opts{:});

inputs = p.Results;

end
