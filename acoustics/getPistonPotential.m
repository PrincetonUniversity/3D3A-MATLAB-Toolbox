function psi = getPistonPotential(p,k,r,varargin)
%GETPISTONPOTENTIAL Potential due to a baffled circular piston.
%   PSI = GETPISTONPOTENTIAL(P,K,R) computes the potential field at points,
%   R, in space and for a given angular wavenumber, K, generated by a
%   baffled circular piston whose properties are specified in the
%   structure, P. The only assumption is that the points at which the field 
%   is computed are in the asymptotic far-field of the piston.
%       K must be specified in rad/m and must be a vector of length N,
%       where N >= 1.
%       R must be specified in meters using Cartesian coordinates, and must 
%       be an M-by-3 matrix where M >= 1.
%
%   The following fields may be specified in the structure, P:
%       1. 'position' - a length-3 vector specifying the position of the
%       piston in meters using Cartesian coordinates. If 'position' is not
%       specified, a default value of [0,0,0] is used.
%
%       2. 'radius' - a scalar specifying the radius of the circular piston
%       in meters. If 'radius' is not specified, a default value of 0.0127
%       is used, which is the radius, in meters, of an individual 
%       loudspeaker on the MAHHLER Class II prototype loudspeaker array. 
%
%       3. 'axis' - a length-3 vector specifying the axis of the circular
%       piston relative to its local coordinate system (i.e., assuming the
%       piston is at the origin). If 'axis' is not specified, a default 
%       value of [1,0,0] is used, indicating that the axis of the piston is 
%       parallel to the x-axis of the global coordinate system.
%
%   The output potential field, PSI, will have dimensions of N-by-M. The 
%   GETPRESSURE function may be used to compute the pressure from the 
%   returned PSI value(s).
%
%   PSI = GETPISTONPOTENTIAL(P,K,R,U) optionally allows a scalar piston
%   acceleration, U, to be specified in m/s^2. If U is not specified, or is 
%   specified as [], a default value of 1/(1.21*(P.radius)^2) is used.
%
%   PSI = GETPISTONPOTENTIAL(P,K,R,U,TD) optionally allows a scalar time
%   delay, TD, to be specified in seconds.
%
%   See also GETPOINTSOURCEPOTENTIAL, GETPRESSURE.

%   =======================================================================
%   This file is part of the 3D3A MATLAB Toolbox.
%   
%   Contributing author(s), listed alphabetically by last name:
%   Rahulram Sridhar <rahulram@princeton.edu>
%   3D Audio and Applied Acoustics (3D3A) Laboratory
%   Princeton University, Princeton, New Jersey 08544, USA
%   
%   MIT License
%   
%   Copyright (c) 2020 Princeton University
%   
%   Permission is hereby granted, free of charge, to any person obtaining a
%   copy of this software and associated documentation files (the 
%   "Software"), to deal in the Software without restriction, including 
%   without limitation the rights to use, copy, modify, merge, publish, 
%   distribute, sublicense, and/or sell copies of the Software, and to 
%   permit persons to whom the Software is furnished to do so, subject to 
%   the following conditions:
%   
%   The above copyright notice and this permission notice shall be included
%   in all copies or substantial portions of the Software.
%   
%   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
%   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
%   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
%   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
%   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
%   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
%   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
%   =======================================================================

% Check number of inputs
narginchk(3,5);

validateattributes(p,{'struct'},{},'getPistonPotential','P',1);
validateattributes(k,{'numeric'},{'vector','real','finite',...
    'nonnegative'},'getPistonPotential','K',2);
validateattributes(r,{'numeric'},{'2d','real','finite','size',[NaN,3]},...
    'getPistonPotential','R',3);

k = shiftdim(k).'; % Force k to be a row vector
kLen = length(k);
numPos = size(r,1);

if ~isfield(p,'position')
    p.position = [0,0,0]; % Baffled piston is placed at the origin.
end
validateattributes(p.position,{'numeric'},{'vector','real','finite'},...
    'getPistonPotential','P.POSITION',1);
p.position = shiftdim(p.position).'; % Force p.position to be a row vector

if ~isfield(p,'radius')
    p.radius = 0.0127; % Loudspeaker radius in MAHHLER Class II prototype
end
validateattributes(p.radius,{'numeric'},{'scalar','real','finite',...
    'positive'},'getPistonPotential','P.RADIUS',1);

if ~isfield(p,'axis')
    % Unit vector along x-axis of piston's local coordinate system.
    p.axis = [1,0,0];
end
validateattributes(p.axis,{'numeric'},{'vector','real','finite'},...
    'getPistonPotential','P.AXIS',1);

if nargin < 5
    phaseDelay = 1; % No delay by default
else
    c = getSoundSpeed();
    validateattributes(varargin{2},{'numeric'},{'scalar','real',...
        'finite'},'getPistonPotential','TD',5);
    phaseDelay = repmat(exp(1i*k*c*varargin{2}),numPos,1);
end

if nargin < 4
    u0n = 1/(1.21*(p.radius)^2);
else
    if isempty(varargin{1})
        u0n = 1/(1.21*(p.radius)^2);
    else
        validateattributes(varargin{1},{'numeric'},{'scalar','real',...
            'finite','positive'},'getPistonPotential','U',4);
        u0n = varargin{1};
    end
end

dr = r-repmat(p.position,numPos,1);
d = computeVectorNorm(dr,2,2);
st = sind(getCentralAngle(dr,repmat(p.axis,numPos,1)));
preTerm = repmat(1.21*u0n*(p.radius)^2./d,1,kLen);

H = 0.5*ones(numPos,kLen);
J_arg = st*k*(p.radius);
J_arg_indxs = find(J_arg);
H(J_arg_indxs) = besselj(1,J_arg(J_arg_indxs))./(J_arg(J_arg_indxs));

psi = (preTerm.*exp(1i*d*k).*H.*phaseDelay).';

end
